<?php

/**
 * @license LGPLv3, http://opensource.org/licenses/LGPL-3.0
 * @copyright Aimeos (aimeos.org), 2017
 * @package MW
 * @subpackage View
 */


namespace Aimeos\MW\View;


/**
 * Allow more than one view engine at once
 *
 * @package MW
 * @subpackage View
 */
class Compose implements \Aimeos\MW\View\Iface
{
	private $engines;


	/**
	 * Initializes the logger object.
	 *
	 * @param array $engines Associative list of file name extensions as keys and view objects as values
	 */
	public function __construct( array $engines )
	{
		\Aimeos\MW\Common\Base::checkClassList( '\Aimeos\MW\View\Iface', $engines );

		$this->engines = $engines;
	}


	/**
	 * Calls the view helper with the given name and arguments and returns it's output.
	 *
	 * @param string $name Name of the view helper
	 * @param array $args Arguments passed to the view helper
	 * @return mixed Output depending on the view helper
	 */
	public function __call( $name, array $args )
	{
		foreach( $this->engines as $engine )
		{
			if( ( $result = call_user_func_array( array( $engine, $name ), $args ) ) !== null ) {
				return $result;
			}
		}
	}


	/**
	 * Returns the value associated to the given key.
	 *
	 * @param string $key Name of the value that should be returned
	 * @return mixed Value associated to the given key
	 * @throws \Aimeos\MW\View\Exception If the requested key isn't available
	 */
	public function __get( $key )
	{
		foreach( $this->engines as $engine )
		{
			if( isset( $engine->$key ) ) {
				return $engine->$key;
			}
		}

		throw new \Aimeos\MW\View\Exception( sprintf( 'No value for key "%1$s" found', $key ) );
	}


	/**
	 * Tests if a key with the given name exists.
	 *
	 * @param string $key Name of the value that should be tested
	 * @return boolean True if the key exists, false if not
	 */
	public function __isset( $key )
	{
		foreach( $this->engines as $engine )
		{
			if( isset( $engine->$key ) ) {
				return true;
			}
		}

		return false;
	}


	/**
	 * Removes a key from the stored values.
	 *
	 * @param string $key Name of the value that should be removed
	 * @return void
	 */
	public function __unset( $key )
	{
		foreach( $this->engines as $engine ) {
			unset( $engine->$key );
		}
	}


	/**
	 * Sets a new value for the given key.
	 *
	 * @param string $key Name of the value that should be set
	 * @param mixed $value Value associated to the given key
	 * @return void
	 */
	public function __set( $key, $value )
	{
		foreach( $this->engines as $engine ) {
			$engine->$key = $value;
		}
	}


	/**
	 * Adds a view helper instance to the view.
	 *
	 * @param string $name Name of the view helper as called in the template
	 * @param \Aimeos\MW\View\Helper\Iface $helper View helper instance
	 * @return void
	 */
	public function addHelper( $name, \Aimeos\MW\View\Helper\Iface $helper )
	{
		foreach( $this->engines as $engine ) {
			$engine->addHelper( $name, $helper );
		}
	}


	/**
	 * Assigns a whole set of values at once to the view.
	 * This method overwrites already existing key/value pairs set by the magic method.
	 *
	 * @param array $values Associative list of key/value pairs
	 * @return void
	 */
	public function assign( array $values )
	{
		foreach( $this->engines as $engine ) {
			$engine->assign( $values );
		}
	}


	/**
	 * Returns the value associated to the given key or the default value if the key is not available.
	 *
	 * @param string $key Name of the value that should be returned
	 * @param mixed $default Default value returned if ths key is not available
	 * @return mixed Value associated to the given key or the default value
	 */
	public function get( $key, $default = null )
	{
		foreach( $this->engines as $engine )
		{
			if( ( $value = $engine->get( $key ) ) !== null ) {
				return $value;
			}
		}

		return $default;
	}


	/**
	 * Renders the output based on the given template file name and the key/value pairs.
	 *
	 * @param string $filename File name of the view template
	 * @return string Output generated by the template
	 * @throws \Aimeos\MW\View\Exception If the template isn't found
	 */
	public function render( $filename )
	{
		return $this->getEngine( $filename )->render( $filename );
	}


	/**
	 * Returns the view engine suitable for the given file name
	 *
	 * @param string $filename Name of the template file including the file extension
	 * @return \Aimeos\MW\View\Iface View engine
	 * @throws \Aimeos\MW\View\Exception If no registered view engine for this file extension is found
	 */
	protected function getEngine( $filename )
	{
		foreach( (array) $filename as $file )
		{
			foreach( $this->engines as $fileext => $engine )
			{
				if( substr_compare( $file, $fileext, -strlen( $fileext ) ) === 0 ) {
					return $engine;
				}
			}
		}

		throw new \Aimeos\MW\View\Exception( sprintf( 'No view engine for "%1$s" found', $filename ) );
	}
}
