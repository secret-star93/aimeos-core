<?php

/**
 * @copyright Copyright (c) Metaways Infosystems GmbH, 2013
 * @license LGPLv3, http://opensource.org/licenses/LGPL-3.0
 * @package Client
 * @subpackage Html
 */


/**
 * Default implementation of catalog attribute filter section in HTML client.
 *
 * @package Client
 * @subpackage Html
 */
class Client_Html_Catalog_Filter_Attribute_Default
	extends Client_Html_Abstract
{
	/** client/html/catalog/filter/attribute/default/subparts
	 * List of HTML sub-clients rendered within the catalog filter attribute section
	 *
	 * The output of the frontend is composed of the code generated by the HTML
	 * clients. Each HTML client can consist of serveral (or none) sub-clients
	 * that are responsible for rendering certain sub-parts of the output. The
	 * sub-clients can contain HTML clients themselves and therefore a
	 * hierarchical tree of HTML clients is composed. Each HTML client creates
	 * the output that is placed inside the container of its parent.
	 *
	 * At first, always the HTML code generated by the parent is printed, then
	 * the HTML code of its sub-clients. The order of the HTML sub-clients
	 * determines the order of the output of these sub-clients inside the parent
	 * container. If the configured list of clients is
	 *
	 *  array( "subclient1", "subclient2" )
	 *
	 * you can easily change the order of the output by reordering the subparts:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1", "subclient2" )
	 *
	 * You can also remove one or more parts if they shouldn't be rendered:
	 *
	 *  client/html/<clients>/subparts = array( "subclient1" )
	 *
	 * As the clients only generates structural HTML, the layout defined via CSS
	 * should support adding, removing or reordering content by a fluid like
	 * design.
	 *
	 * @param array List of sub-client names
	 * @since 2014.03
	 * @category Developer
	 */
	private $_subPartPath = 'client/html/catalog/filter/attribute/default/subparts';
	private $_subPartNames = array();
	private $_tags = array();
	private $_expire;
	private $_cache;


	/**
	 * Returns the HTML code for insertion into the body.
	 *
	 * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
	 * @param array &$tags Result array for the list of tags that are associated to the output
	 * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
	 * @return string HTML code
	 */
	public function getBody( $uid = '', array &$tags = array(), &$expire = null )
	{
		$view = $this->_setViewParams( $this->getView(), $tags, $expire );

		$html = '';
		foreach( $this->_getSubClients() as $subclient ) {
			$html .= $subclient->setView( $view )->getBody( $uid, $tags, $expire );
		}
		$view->attributeBody = $html;

		/** client/html/catalog/filter/attribute/default/template-body
		 * Relative path to the HTML body template of the catalog filter attribute client.
		 *
		 * The template file contains the HTML code and processing instructions
		 * to generate the result shown in the body of the frontend. The
		 * configuration string is the path to the template file relative
		 * to the layouts directory (usually in client/html/layouts).
		 *
		 * You can overwrite the template file configuration in extensions and
		 * provide alternative templates. These alternative templates should be
		 * named like the default one but with the string "default" replaced by
		 * an unique name. You may use the name of your project for this. If
		 * you've implemented an alternative client class as well, "default"
		 * should be replaced by the name of the new class.
		 *
		 * @param string Relative path to the template creating code for the HTML page body
		 * @since 2014.03
		 * @category Developer
		 * @see client/html/catalog/filter/attribute/default/template-header
		 */
		$tplconf = 'client/html/catalog/filter/attribute/default/template-body';
		$default = 'catalog/filter/attribute-body-default.html';

		return $view->render( $this->_getTemplate( $tplconf, $default ) );
	}


	/**
	 * Returns the HTML string for insertion into the header.
	 *
	 * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
	 * @param array &$tags Result array for the list of tags that are associated to the output
	 * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
	 * @return string|null String including HTML tags for the header on error
	 */
	public function getHeader( $uid = '', array &$tags = array(), &$expire = null )
	{
		$view = $this->_setViewParams( $this->getView(), $tags, $expire );

		$html = '';
		foreach( $this->_getSubClients() as $subclient ) {
			$html .= $subclient->setView( $view )->getHeader( $uid, $tags, $expire );
		}
		$view->attributeHeader = $html;

		/** client/html/catalog/filter/attribute/default/template-header
		 * Relative path to the HTML header template of the catalog filter attribute client.
		 *
		 * The template file contains the HTML code and processing instructions
		 * to generate the HTML code that is inserted into the HTML page header
		 * of the rendered page in the frontend. The configuration string is the
		 * path to the template file relative to the layouts directory (usually
		 * in client/html/layouts).
		 *
		 * You can overwrite the template file configuration in extensions and
		 * provide alternative templates. These alternative templates should be
		 * named like the default one but with the string "default" replaced by
		 * an unique name. You may use the name of your project for this. If
		 * you've implemented an alternative client class as well, "default"
		 * should be replaced by the name of the new class.
		 *
		 * @param string Relative path to the template creating code for the HTML page head
		 * @since 2014.03
		 * @category Developer
		 * @see client/html/catalog/filter/attribute/default/template-body
		 */
		$tplconf = 'client/html/catalog/filter/attribute/default/template-header';
		$default = 'catalog/filter/attribute-header-default.html';

		return $view->render( $this->_getTemplate( $tplconf, $default ) );
	}


	/**
	 * Returns the sub-client given by its name.
	 *
	 * @param string $type Name of the client type
	 * @param string|null $name Name of the sub-client (Default if null)
	 * @return Client_Html_Interface Sub-client object
	 */
	public function getSubClient( $type, $name = null )
	{
		return $this->_createSubClient( 'catalog/filter/attribute/' . $type, $name );
	}


	/**
	 * Returns the list of sub-client names configured for the client.
	 *
	 * @return array List of HTML client names
	 */
	protected function _getSubClientNames()
	{
		return $this->_getContext()->getConfig()->get( $this->_subPartPath, $this->_subPartNames );
	}


	/**
	 * Sets the necessary parameter values in the view.
	 *
	 * @param MW_View_Interface $view The view object which generates the HTML output
	 * @return MW_View_Interface Modified view object
	 */
	protected function _setViewParams( MW_View_Interface $view, array &$tags = array(), &$expire = null )
	{
		if( !isset( $this->_cache ) )
		{
			$attrMap = array();

			/** client/html/catalog/filter/attribute/types
			 * List of attribute types that should be displayed in this order in the catalog filter
			 *
			 * The attribute section in the catalog filter component can display
			 * all attributes a visitor can use to reduce the listed products
			 * to those that contains one or more attributes. By default, all
			 * available attributes will be displayed and ordered by their
			 * attribute type.
			 *
			 * With this setting, you can limit the attribute types to only thoses
			 * whose names are part of the setting value. Furthermore, a particular
			 * order for the attribute types can be enforced that is different
			 * from the standard order.
			 *
			 * @param array List of attribute type codes
			 * @since 2015.05
			 * @category User
			 * @category Developer
			 * @see client/html/catalog/filter/attribute/domains
			 */
			$attrTypes = $view->config( 'client/html/catalog/filter/attribute/types', array() );

			$manager = MShop_Factory::createManager( $this->_getContext(), 'attribute' );
			$search = $manager->createSearch( true );

			$expr = array();
			if( !empty( $attrTypes ) ) {
				$expr[] = $search->compare( '==', 'attribute.type.code', $attrTypes );
			}

			$expr[] = $search->compare( '==', 'attribute.domain', 'product' );
			$expr[] = $search->getConditions();

			$sort = array( $search->sort( '+', 'attribute.position' ) );

			$search->setConditions( $search->combine( '&&', $expr ) );
			$search->setSortations( $sort );

			/** client/html/catalog/filter/attribute/domains
			 * List of domain names whose items should be fetched with the filter attributes
			 *
			 * The templates rendering the attributes in the catalog filter usually
			 * add the images and texts associated to each item. If you want to
			 * display additional content, you can configure your own list of
			 * domains (attribute, media, price, product, text, etc. are domains)
			 * whose items are fetched from the storage. Please keep in mind that
			 * the more domains you add to the configuration, the more time is
			 * required for fetching the content!
			 *
			 * @param array List of domain item names
			 * @since 2015.05
			 * @category Developer
			 * @see client/html/catalog/filter/attribute/types
			 */
			$domains = $view->config( 'client/html/catalog/filter/attribute/domains', array( 'text', 'media' ) );

			$attributes = $manager->searchItems( $search, $domains );

			foreach( $attributes as $id => $item ) {
				$attrMap[ $item->getType() ][$id] = $item;
			}

			if( !empty( $attrTypes ) )
			{
				$sortedMap = array();

				foreach( $attrTypes as $type )
				{
					if( isset( $attrMap[$type] ) ) {
						$sortedMap[$type] = $attrMap[$type];
					}
				}

				$attrMap = $sortedMap;
			}
			else
			{
				ksort( $attrMap );
			}

			$this->_addMetaItem( $attributes, 'attribute', $this->_expire, $this->_tags );
			$this->_addMetaList( array_keys( $attributes ), 'attribute', $this->_expire );

			// Delete cache when attributes are added or deleted even in "tag-all" mode
			$this->_tags[] = 'attribute';


			$view->attributeMap = $attrMap;

			$this->_cache = $view;
		}

		$expire = $this->_expires( $this->_expire, $expire );
		$tags = array_merge( $tags, $this->_tags );

		return $this->_cache;
	}
}